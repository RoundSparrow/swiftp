import groovy.swing.SwingBuilder

apply plugin: 'android'

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.2"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 19
        versionCode 10
        versionName "0.1.10"
    }

    /*
    App Idea ToDo:
      Add another Advanced option, with default true, for startForeground service. Benefit being that it is less likely to be killed on low memory usage.
      Notification icon could show time of most recent transfer and the AtomicInteger index of number received so far.
     */

    // APK signing key
    // Tips on key generation:
    //  1. http://commonsware.com/blog/2013/09/09/psa-think-about-stronger-app-signing-keys.html
    //
    // Release should be rare, perhaps only do from command-line gradlew and prompt for password
    signingConfigs {
        release {
            println ("next line is CameraCornet_REL_KEYSTORE")
            println System.getenv("CameraCornet_REL_KEYSTORE")
            storeFile file(System.getenv("CameraCornet_REL_KEYSTORE"))
            storePassword ""  // trigger interactive input
            keyAlias System.getenv("CameraCornet_REL_KEY_ALIAS")
            keyPassword ""    // trigger interactive input
        }

        debug {
            // storeFile file("/home/adminsag/.android/debug.keystore")
            // storeFile file("/spot/WorkDev0/ZebraCameraGit0/AppKey0/ZC_debug.keystore")
            println "next line is ZC_DEBUG_KEYSTORE"
            println System.getenv("ZC_DEBUG_KEYSTORE")

            storeFile file(System.getenv("ZC_DEBUG_KEYSTORE"))
            storePassword System.getenv("ZC_DEBUG_KEYSTORE_PASSWORD")
            keyAlias System.getenv("ZC_DEBUG_KEY_ALIAS")
            keyPassword System.getenv("ZC_DEBUG_KEY_PASSWORD")
        }

        debugCameraCornet { // debug
            println "next line is ZC_DEBUG_KEYSTORE"
            println System.getenv("ZC_DEBUG_KEYSTORE")

            storeFile file(System.getenv("ZC_DEBUG_KEYSTORE"))
            storePassword System.getenv("ZC_DEBUG_KEYSTORE_PASSWORD")
            keyAlias System.getenv("ZC_DEBUG_KEY_ALIAS")
            keyPassword System.getenv("ZC_DEBUG_KEY_PASSWORD")
        }

    } /* signingConfigs */

    buildTypes {
        release {
            debuggable false
            jniDebugBuild false
            runProguard true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug {              // debug without our own key - but key may be of local user, so probably best to keep a common one for multiple dev machines
            debuggable true
            jniDebugBuild true
            // signingConfig signingConfigs.myCameraCornet
        }
        debugCameraCornet {  // with our own custom debug signing key
            debuggable true
            jniDebugBuild true
            // signingConfig signingConfigs.debugCameraCornet
        }
    } /* buildTypes */

    // ToDo: Remove this, it is a quick fix to get Release to work
    //    ./gradlew assembleRelease
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:+'
    compile fileTree(dir: 'libs', include: ['*.jar'])
}



/*
https://www.timroes.de/2014/01/19/using-password-prompts-with-gradle-build-files/
 */
gradle.taskGraph.whenReady { taskGraph ->
    println ("taskGraph.whenReady starting")

    // NOTE: following line has to be revised depending on App project name.
    if(taskGraph.hasTask(':SwiFTP:assembleRelease')) {

        def pass = ''
        if(System.console() == null) {
            new SwingBuilder().edt {
                dialog(modal: true, // Otherwise the build will continue running before you closed the dialog
                        title: 'Enter password', // Dialog title
                        alwaysOnTop: true, // pretty much what the name says
                        resizable: false, // Don't allow the user to resize the dialog
                        locationRelativeTo: null, // Place dialog in center of the screen
                        pack: true, // We need to pack the dialog (so it will take the size of it's children)
                        show: true // Let's show it
                ) {
                    vbox { // Put everything below each other
                        label(text: "Please enter key passphrase: ")
                        input = passwordField()
                        button(defaultButton: true, text: 'OK', actionPerformed: {
                            pass = input.password; // Set pass variable to value of input field
                            dispose(); // Close dialog
                        })
                    } // vbox end
                } // dialog end
            } // edt end
        } else {
            pass = System.console().readPassword("\nPlease enter key passphrase: ")
            pass = new String(pass)
        }

        if(pass.size() <= 0) {
            throw new InvalidUserDataException("You must enter a password to proceed.")
        }

        // -----
        // Do what you need to do with pass here!
        // -----
        android.signingConfigs.release.storePassword = pass
        android.signingConfigs.release.keyPassword = pass
    } // end if has task
} // end whenReady
